package com.example.demo.controller;

import com.example.demo.dto.OrderDTO;
import com.example.demo.dto.OrderRequest;
import com.example.demo.dto.OrderResponse;
import com.example.demo.dto.ResponseWrapper;
import com.example.demo.entity.Order;
import com.example.demo.entity.User;
import com.example.demo.entity.enums.OrderStatus;
import com.example.demo.entity.enums.PaymentMethod;
import com.example.demo.repository.UserRepository;
import com.example.demo.service.OrderService;
import com.example.demo.service.PaymentService;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.validation.Valid;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.Authentication;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.Map;
import java.util.HashMap;

/**
 * Controller for managing user orders functionality
 * Provides both web pages and REST API endpoints
 */
@Controller
@Tag(name = "üì¶ Orders", description = "Order management APIs - Create, view, cancel orders")
public class OrderController extends BaseController {
    
    private static final Logger logger = LoggerFactory.getLogger(OrderController.class);
    
    @Autowired
    private OrderService orderService;
    
    @Autowired
    private UserRepository userRepository;
    
    @Autowired
    private PaymentService paymentService;
    
    /**
     * Display user's orders page
     */
    @GetMapping("/orders")
    public String ordersPage(Authentication authentication, Model model,
                            @RequestParam(defaultValue = "0") int page,
                            @RequestParam(defaultValue = "10") int size) {
        try {
            // Check authentication
            if (authentication == null || !authentication.isAuthenticated()) {
                return "redirect:/auth/login";
            }
            
            User user = userRepository.findByEmail(authentication.getName()).orElse(null);
            if (user == null) {
                return "redirect:/auth/login";
            }
            
            // Get user's orders with pagination
            Pageable pageable = PageRequest.of(page, size, Sort.by("orderDate").descending());
            Page<OrderDTO> orders = orderService.getUserOrders(user.getId(), pageable);
            
            // Add breadcrumbs
            addBreadcrumb(model, "Trang ch·ªß", "/");
            addBreadcrumb(model, "ƒê∆°n h√†ng c·ªßa t√¥i", "/orders");
            
            // Add model attributes
            model.addAttribute("orders", orders);
            model.addAttribute("currentPage", page);
            model.addAttribute("totalPages", orders.getTotalPages());
            model.addAttribute("totalElements", orders.getTotalElements());
            
            return "orders/index";
            
        } catch (Exception e) {
            logger.error("Error displaying orders page: {}", e.getMessage());
            model.addAttribute("error", "C√≥ l·ªói x·∫£y ra khi t·∫£i danh s√°ch ƒë∆°n h√†ng");
            return "error/500";
        }
    }
    
    /**
     * Display order detail page
     */
    @GetMapping("/orders/{orderId}")
    public String orderDetailPage(@PathVariable Long orderId, Authentication authentication, Model model) {
        try {
            // Check authentication
            if (authentication == null || !authentication.isAuthenticated()) {
                return "redirect:/auth/login";
            }
            
            User user = userRepository.findByEmail(authentication.getName()).orElse(null);
            if (user == null) {
                return "redirect:/auth/login";
            }
            
            // Get order details
            OrderResponse orderResponse = orderService.getOrder(orderId, user.getId());
            
            if (!orderResponse.isSuccess()) {
                model.addAttribute("error", orderResponse.getMessage());
                return "error/404";
            }
            
            // Add breadcrumbs
            addBreadcrumb(model, "Trang ch·ªß", "/");
            addBreadcrumb(model, "ƒê∆°n h√†ng c·ªßa t√¥i", "/orders");
            addBreadcrumb(model, "Chi ti·∫øt ƒë∆°n h√†ng #" + orderId, "/orders/" + orderId);
            
            // Add model attributes
            model.addAttribute("order", orderResponse.getOrder());
            
            return "orders/detail";
            
        } catch (Exception e) {
            logger.error("Error displaying order detail page: {}", e.getMessage());
            model.addAttribute("error", "C√≥ l·ªói x·∫£y ra khi t·∫£i chi ti·∫øt ƒë∆°n h√†ng");
            return "error/500";
        }
    }
    
    /**
     * Display checkout page
     */
    @GetMapping("/checkout")
    public String checkoutPage(Authentication authentication, Model model) {
        try {
            // Check authentication
            if (authentication == null || !authentication.isAuthenticated()) {
                return "redirect:/auth/login";
            }
            
            User user = userRepository.findByEmail(authentication.getName()).orElse(null);
            if (user == null) {
                return "redirect:/auth/login";
            }
            
            // Validate user profile before checkout
            String validationError = validateUserProfileForCheckout(user);
            if (validationError != null) {
                model.addAttribute("error", validationError);
                model.addAttribute("requireProfileUpdate", true);
                model.addAttribute("user", user);
                
                // Add breadcrumbs
                addBreadcrumb(model, "Trang ch·ªß", "/");
                addBreadcrumb(model, "Gi·ªè h√†ng", "/cart");
                addBreadcrumb(model, "Thanh to√°n", "/checkout");
                
                // Add page metadata
                model.addAttribute("pageTitle", "C·∫≠p nh·∫≠t th√¥ng tin - StarShop");
                model.addAttribute("pageDescription", "Vui l√≤ng c·∫≠p nh·∫≠t th√¥ng tin t√†i kho·∫£n ƒë·ªÉ ti·∫øp t·ª•c");
                
                return "orders/checkout";
            }
            
            // Add breadcrumbs
            addBreadcrumb(model, "Trang ch·ªß", "/");
            addBreadcrumb(model, "Gi·ªè h√†ng", "/cart");
            addBreadcrumb(model, "Thanh to√°n", "/checkout");
            
            // Add user info for checkout form
            model.addAttribute("user", user);
            
            // Add payment methods
            Map<String, Object> paymentMethods = paymentService.getAvailablePaymentMethods();
            model.addAttribute("paymentMethods", paymentMethods);
            
            // Add page metadata
            model.addAttribute("pageTitle", "Thanh to√°n - StarShop");
            model.addAttribute("pageDescription", "Ho√†n t·∫•t ƒë∆°n h√†ng c·ªßa b·∫°n t·∫°i StarShop");
            
            return "orders/checkout";
            
        } catch (Exception e) {
            logger.error("Error displaying checkout page: {}", e.getMessage());
            model.addAttribute("error", "C√≥ l·ªói x·∫£y ra khi t·∫£i trang thanh to√°n");
            return "error/500";
        }
    }
    
    /**
     * REST API: Create order from cart
     */
    @Operation(
        summary = "T·∫°o ƒë∆°n h√†ng t·ª´ gi·ªè h√†ng",
        description = "T·∫°o ƒë∆°n h√†ng m·ªõi t·ª´ c√°c s·∫£n ph·∫©m trong gi·ªè h√†ng. Gi·ªè h√†ng s·∫Ω ƒë∆∞·ª£c x√≥a sau khi t·∫°o ƒë∆°n th√†nh c√¥ng.",
        security = @SecurityRequirement(name = "bearerAuth")
    )
    @ApiResponses(value = {
        @ApiResponse(responseCode = "200", description = "T·∫°o ƒë∆°n th√†nh c√¥ng"),
        @ApiResponse(responseCode = "400", description = "Th√¥ng tin kh√¥ng h·ª£p l·ªá ho·∫∑c gi·ªè h√†ng tr·ªëng"),
        @ApiResponse(responseCode = "401", description = "Ch∆∞a x√°c th·ª±c")
    })
    @PostMapping("/api/orders/create-from-cart")
    @ResponseBody
    public ResponseEntity<ResponseWrapper<OrderResponse>> createOrderFromCart(
            @io.swagger.v3.oas.annotations.parameters.RequestBody(
                description = "Th√¥ng tin ƒë∆°n h√†ng (ƒë·ªãa ch·ªâ, payment method, voucher, notes)",
                required = true
            )
            @Valid @RequestBody OrderRequest request,
            @Parameter(hidden = true) Authentication authentication) {
        
        try {
            // Check authentication
            if (authentication == null || !authentication.isAuthenticated()) {
                return ResponseEntity.status(401)
                    .body(ResponseWrapper.error("Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ s·ª≠ d·ª•ng t√≠nh nƒÉng n√†y"));
            }
            
            User user = userRepository.findByEmail(authentication.getName()).orElse(null);
            if (user == null) {
                return ResponseEntity.status(401)
                    .body(ResponseWrapper.error("Ng∆∞·ªùi d√πng kh√¥ng h·ª£p l·ªá"));
            }
            
            // Create order from cart
            OrderResponse orderResponse = orderService.createOrderFromCart(user.getId(), request);
            
            if (orderResponse.isSuccess()) {
                return ResponseEntity.ok(ResponseWrapper.success(orderResponse));
            } else {
                return ResponseEntity.badRequest()
                    .body(ResponseWrapper.error(orderResponse.getMessage()));
            }
            
        } catch (Exception e) {
            logger.error("Error creating order from cart: {}", e.getMessage());
            return ResponseEntity.internalServerError()
                .body(ResponseWrapper.error("C√≥ l·ªói x·∫£y ra khi t·∫°o ƒë∆°n h√†ng"));
        }
    }
    
    /**
     * REST API: Create order directly
     */
    @Operation(
        summary = "T·∫°o ƒë∆°n h√†ng tr·ª±c ti·∫øp",
        description = "T·∫°o ƒë∆°n h√†ng m·ªõi kh√¥ng qua gi·ªè h√†ng. Ph·∫£i cung c·∫•p danh s√°ch s·∫£n ph·∫©m (items) trong request.",
        security = @SecurityRequirement(name = "bearerAuth")
    )
    @ApiResponses(value = {
        @ApiResponse(responseCode = "200", description = "T·∫°o ƒë∆°n th√†nh c√¥ng"),
        @ApiResponse(responseCode = "400", description = "Th√¥ng tin kh√¥ng h·ª£p l·ªá ho·∫∑c s·∫£n ph·∫©m h·∫øt h√†ng"),
        @ApiResponse(responseCode = "401", description = "Ch∆∞a x√°c th·ª±c")
    })
    @PostMapping("/api/orders/create-direct")
    @ResponseBody
    public ResponseEntity<ResponseWrapper<OrderResponse>> createOrderDirect(
            @io.swagger.v3.oas.annotations.parameters.RequestBody(
                description = "Th√¥ng tin ƒë∆°n h√†ng v·ªõi danh s√°ch items, address, payment method",
                required = true
            )
            @Valid @RequestBody OrderRequest request,
            @Parameter(hidden = true) Authentication authentication) {
        
        try {
            // Check authentication
            if (authentication == null || !authentication.isAuthenticated()) {
                return ResponseEntity.status(401)
                    .body(ResponseWrapper.error("Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ s·ª≠ d·ª•ng t√≠nh nƒÉng n√†y"));
            }
            
            User user = userRepository.findByEmail(authentication.getName()).orElse(null);
            if (user == null) {
                return ResponseEntity.status(401)
                    .body(ResponseWrapper.error("Ng∆∞·ªùi d√πng kh√¥ng h·ª£p l·ªá"));
            }
            
            // Create order directly
            OrderResponse orderResponse = orderService.createOrderDirect(user.getId(), request);
            
            if (orderResponse.isSuccess()) {
                return ResponseEntity.ok(ResponseWrapper.success(orderResponse));
            } else {
                return ResponseEntity.badRequest()
                    .body(ResponseWrapper.error(orderResponse.getMessage()));
            }
            
        } catch (Exception e) {
            logger.error("Error creating direct order: {}", e.getMessage());
            return ResponseEntity.internalServerError()
                .body(ResponseWrapper.error("C√≥ l·ªói x·∫£y ra khi t·∫°o ƒë∆°n h√†ng"));
        }
    }
    
    /**
     * REST API: Get user's orders
     */
    @Operation(
        summary = "L·∫•y danh s√°ch ƒë∆°n h√†ng",
        description = "L·∫•y danh s√°ch t·∫•t c·∫£ ƒë∆°n h√†ng c·ªßa ng∆∞·ªùi d√πng hi·ªán t·∫°i v·ªõi ph√¢n trang. S·∫Øp x·∫øp theo ng√†y t·∫°o m·ªõi nh·∫•t.",
        security = @SecurityRequirement(name = "bearerAuth")
    )
    @ApiResponses(value = {
        @ApiResponse(responseCode = "200", description = "L·∫•y th√†nh c√¥ng"),
        @ApiResponse(responseCode = "401", description = "Ch∆∞a x√°c th·ª±c")
    })
    @GetMapping("/api/orders/list")
    @ResponseBody
    public ResponseEntity<ResponseWrapper<Page<OrderDTO>>> getUserOrders(
            @Parameter(description = "Trang s·ªë (0-indexed)", example = "0")
            @RequestParam(defaultValue = "0") int page,
            @Parameter(description = "S·ªë l∆∞·ª£ng items per page", example = "10")
            @RequestParam(defaultValue = "10") int size,
            @Parameter(hidden = true) Authentication authentication) {
        
        try {
            // Check authentication
            if (authentication == null || !authentication.isAuthenticated()) {
                return ResponseEntity.status(401)
                    .body(ResponseWrapper.error("Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ s·ª≠ d·ª•ng t√≠nh nƒÉng n√†y"));
            }
            
            User user = userRepository.findByEmail(authentication.getName()).orElse(null);
            if (user == null) {
                return ResponseEntity.status(401)
                    .body(ResponseWrapper.error("Ng∆∞·ªùi d√πng kh√¥ng h·ª£p l·ªá"));
            }
            
            // Get user's orders
            Pageable pageable = PageRequest.of(page, size, Sort.by("orderDate").descending());
            Page<OrderDTO> orders = orderService.getUserOrders(user.getId(), pageable);
            
            return ResponseEntity.ok(ResponseWrapper.success(orders));
            
        } catch (Exception e) {
            logger.error("Error getting user orders: {}", e.getMessage());
            return ResponseEntity.internalServerError()
                .body(ResponseWrapper.error("C√≥ l·ªói x·∫£y ra khi l·∫•y danh s√°ch ƒë∆°n h√†ng"));
        }
    }
    
    /**
     * REST API: Get order details
     */
    @Operation(
        summary = "L·∫•y chi ti·∫øt ƒë∆°n h√†ng",
        description = "L·∫•y th√¥ng tin chi ti·∫øt c·ªßa m·ªôt ƒë∆°n h√†ng theo ID. Ch·ªâ l·∫•y ƒë∆∞·ª£c ƒë∆°n h√†ng c·ªßa ch√≠nh m√¨nh.",
        security = @SecurityRequirement(name = "bearerAuth")
    )
    @ApiResponses(value = {
        @ApiResponse(responseCode = "200", description = "L·∫•y th√†nh c√¥ng"),
        @ApiResponse(responseCode = "400", description = "Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng ho·∫∑c kh√¥ng c√≥ quy·ªÅn truy c·∫≠p"),
        @ApiResponse(responseCode = "401", description = "Ch∆∞a x√°c th·ª±c")
    })
    @GetMapping("/api/orders/{orderId}")
    @ResponseBody
    public ResponseEntity<ResponseWrapper<OrderResponse>> getOrder(
            @Parameter(description = "ID ƒë∆°n h√†ng", required = true)
            @PathVariable Long orderId,
            @Parameter(hidden = true) Authentication authentication) {
        
        try {
            // Check authentication
            if (authentication == null || !authentication.isAuthenticated()) {
                return ResponseEntity.status(401)
                    .body(ResponseWrapper.error("Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ s·ª≠ d·ª•ng t√≠nh nƒÉng n√†y"));
            }
            
            User user = userRepository.findByEmail(authentication.getName()).orElse(null);
            if (user == null) {
                return ResponseEntity.status(401)
                    .body(ResponseWrapper.error("Ng∆∞·ªùi d√πng kh√¥ng h·ª£p l·ªá"));
            }
            
            // Get order details
            OrderResponse orderResponse = orderService.getOrder(orderId, user.getId());
            
            if (orderResponse.isSuccess()) {
                return ResponseEntity.ok(ResponseWrapper.success(orderResponse));
            } else {
                return ResponseEntity.badRequest()
                    .body(ResponseWrapper.error(orderResponse.getMessage()));
            }
            
        } catch (Exception e) {
            logger.error("Error getting order {}: {}", orderId, e.getMessage());
            return ResponseEntity.internalServerError()
                .body(ResponseWrapper.error("C√≥ l·ªói x·∫£y ra khi l·∫•y th√¥ng tin ƒë∆°n h√†ng"));
        }
    }
    
    /**
     * REST API: Cancel order
     */
    @Operation(
        summary = "H·ªßy ƒë∆°n h√†ng",
        description = "H·ªßy ƒë∆°n h√†ng theo ID. Ch·ªâ ƒë∆∞·ª£c h·ªßy ƒë∆°n ·ªü tr·∫°ng th√°i PENDING ho·∫∑c PROCESSING.",
        security = @SecurityRequirement(name = "bearerAuth")
    )
    @ApiResponses(value = {
        @ApiResponse(responseCode = "200", description = "H·ªßy th√†nh c√¥ng"),
        @ApiResponse(responseCode = "400", description = "Kh√¥ng th·ªÉ h·ªßy ƒë∆°n h√†ng (sai tr·∫°ng th√°i ho·∫∑c kh√¥ng c√≥ quy·ªÅn)"),
        @ApiResponse(responseCode = "401", description = "Ch∆∞a x√°c th·ª±c")
    })
    @PutMapping("/api/orders/{orderId}/cancel")
    @ResponseBody
    public ResponseEntity<ResponseWrapper<OrderResponse>> cancelOrder(
            @Parameter(description = "ID ƒë∆°n h√†ng c·∫ßn h·ªßy", required = true)
            @PathVariable Long orderId,
            @Parameter(hidden = true) Authentication authentication) {
        
        try {
            // Check authentication
            if (authentication == null || !authentication.isAuthenticated()) {
                return ResponseEntity.status(401)
                    .body(ResponseWrapper.error("Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ s·ª≠ d·ª•ng t√≠nh nƒÉng n√†y"));
            }
            
            User user = userRepository.findByEmail(authentication.getName()).orElse(null);
            if (user == null) {
                return ResponseEntity.status(401)
                    .body(ResponseWrapper.error("Ng∆∞·ªùi d√πng kh√¥ng h·ª£p l·ªá"));
            }
            
            // Cancel order
            OrderResponse orderResponse = orderService.cancelOrder(orderId, user.getId());
            
            if (orderResponse.isSuccess()) {
                return ResponseEntity.ok(ResponseWrapper.success(orderResponse));
            } else {
                return ResponseEntity.badRequest()
                    .body(ResponseWrapper.error(orderResponse.getMessage()));
            }
            
        } catch (Exception e) {
            logger.error("Error cancelling order {}: {}", orderId, e.getMessage());
            return ResponseEntity.internalServerError()
                .body(ResponseWrapper.error("C√≥ l·ªói x·∫£y ra khi h·ªßy ƒë∆°n h√†ng"));
        }
    }
    
    /**
     * REST API: Update order status (Admin/Staff only)
     */
    @Operation(
        summary = "C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng (Admin/Staff)",
        description = "C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng. Ch·ªâ Admin v√† Staff c√≥ quy·ªÅn s·ª≠ d·ª•ng. Tr·∫°ng th√°i: PENDING, PROCESSING, SHIPPING, DELIVERED, CANCELLED.",
        security = @SecurityRequirement(name = "bearerAuth")
    )
    @ApiResponses(value = {
        @ApiResponse(responseCode = "200", description = "C·∫≠p nh·∫≠t th√†nh c√¥ng"),
        @ApiResponse(responseCode = "400", description = "Tr·∫°ng th√°i kh√¥ng h·ª£p l·ªá"),
        @ApiResponse(responseCode = "401", description = "Ch∆∞a x√°c th·ª±c"),
        @ApiResponse(responseCode = "403", description = "Kh√¥ng c√≥ quy·ªÅn (y√™u c·∫ßu Admin/Staff)")
    })
    @PutMapping("/api/orders/{orderId}/status")
    @ResponseBody
    public ResponseEntity<ResponseWrapper<OrderResponse>> updateOrderStatus(
            @Parameter(description = "ID ƒë∆°n h√†ng", required = true)
            @PathVariable Long orderId,
            @Parameter(description = "Tr·∫°ng th√°i m·ªõi", required = true, example = "PROCESSING")
            @RequestParam OrderStatus status,
            @Parameter(hidden = true) Authentication authentication) {
        
        try {
            // Check authentication
            if (authentication == null || !authentication.isAuthenticated()) {
                return ResponseEntity.status(401)
                    .body(ResponseWrapper.error("Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ s·ª≠ d·ª•ng t√≠nh nƒÉng n√†y"));
            }
            
            User user = userRepository.findByEmail(authentication.getName()).orElse(null);
            if (user == null) {
                return ResponseEntity.status(401)
                    .body(ResponseWrapper.error("Ng∆∞·ªùi d√πng kh√¥ng h·ª£p l·ªá"));
            }
            
            // Check if user has admin/staff role
            if (!user.getRole().name().equals("ADMIN") && !user.getRole().name().equals("STAFF")) {
                return ResponseEntity.status(403)
                    .body(ResponseWrapper.error("B·∫°n kh√¥ng c√≥ quy·ªÅn th·ª±c hi·ªán thao t√°c n√†y"));
            }
            
            // Update order status
            OrderResponse orderResponse = orderService.updateOrderStatus(orderId, status);
            
            if (orderResponse.isSuccess()) {
                return ResponseEntity.ok(ResponseWrapper.success(orderResponse));
            } else {
                return ResponseEntity.badRequest()
                    .body(ResponseWrapper.error(orderResponse.getMessage()));
            }
            
        } catch (Exception e) {
            logger.error("Error updating order {} status: {}", orderId, e.getMessage());
            return ResponseEntity.internalServerError()
                .body(ResponseWrapper.error("C√≥ l·ªói x·∫£y ra khi c·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng"));
        }
    }
    
    /**
     * REST API: Get orders by status (Admin/Staff only)
     */
    @Operation(
        summary = "L·∫•y ƒë∆°n h√†ng theo tr·∫°ng th√°i (Admin/Staff)",
        description = "L·∫•y t·∫•t c·∫£ ƒë∆°n h√†ng theo tr·∫°ng th√°i c·ª• th·ªÉ. Ch·ªâ Admin v√† Staff c√≥ quy·ªÅn. D√πng ƒë·ªÉ qu·∫£n l√Ω v√† theo d√µi ƒë∆°n h√†ng.",
        security = @SecurityRequirement(name = "bearerAuth")
    )
    @ApiResponses(value = {
        @ApiResponse(responseCode = "200", description = "L·∫•y th√†nh c√¥ng"),
        @ApiResponse(responseCode = "401", description = "Ch∆∞a x√°c th·ª±c"),
        @ApiResponse(responseCode = "403", description = "Kh√¥ng c√≥ quy·ªÅn (y√™u c·∫ßu Admin/Staff)")
    })
    @GetMapping("/api/orders/status/{status}")
    @ResponseBody
    public ResponseEntity<ResponseWrapper<List<OrderDTO>>> getOrdersByStatus(
            @Parameter(description = "Tr·∫°ng th√°i ƒë∆°n h√†ng", required = true, example = "PENDING")
            @PathVariable OrderStatus status,
            @Parameter(hidden = true) Authentication authentication) {
        
        try {
            // Check authentication
            if (authentication == null || !authentication.isAuthenticated()) {
                return ResponseEntity.status(401)
                    .body(ResponseWrapper.error("Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ s·ª≠ d·ª•ng t√≠nh nƒÉng n√†y"));
            }
            
            User user = userRepository.findByEmail(authentication.getName()).orElse(null);
            if (user == null) {
                return ResponseEntity.status(401)
                    .body(ResponseWrapper.error("Ng∆∞·ªùi d√πng kh√¥ng h·ª£p l·ªá"));
            }
            
            // Check if user has admin/staff role
            if (!user.getRole().name().equals("ADMIN") && !user.getRole().name().equals("STAFF")) {
                return ResponseEntity.status(403)
                    .body(ResponseWrapper.error("B·∫°n kh√¥ng c√≥ quy·ªÅn th·ª±c hi·ªán thao t√°c n√†y"));
            }
            
            // Get orders by status
            List<OrderDTO> orders = orderService.getOrdersByStatus(status);
            
            return ResponseEntity.ok(ResponseWrapper.success(orders));
            
        } catch (Exception e) {
            logger.error("Error getting orders by status {}: {}", status, e.getMessage());
            return ResponseEntity.internalServerError()
                .body(ResponseWrapper.error("C√≥ l·ªói x·∫£y ra khi l·∫•y danh s√°ch ƒë∆°n h√†ng"));
        }
    }
    
    /**
     * REST API: Process payment for an order
     */
    @Operation(
        summary = "X·ª≠ l√Ω thanh to√°n cho ƒë∆°n h√†ng",
        description = "Kh·ªüi t·∫°o qu√° tr√¨nh thanh to√°n cho ƒë∆°n h√†ng. H·ªó tr·ª£ COD v√† MoMo. N·∫øu l√† MoMo s·∫Ω tr·∫£ v·ªÅ payment URL.",
        security = @SecurityRequirement(name = "bearerAuth")
    )
    @ApiResponses(value = {
        @ApiResponse(responseCode = "200", description = "Thanh to√°n th√†nh c√¥ng ho·∫∑c l·∫•y payment URL"),
        @ApiResponse(responseCode = "400", description = "ƒê∆°n h√†ng kh√¥ng h·ª£p l·ªá ho·∫∑c l·ªói thanh to√°n"),
        @ApiResponse(responseCode = "401", description = "Ch∆∞a x√°c th·ª±c")
    })
    @PostMapping("/api/orders/{orderId}/payment")
    @ResponseBody
    public ResponseEntity<ResponseWrapper<PaymentService.PaymentResult>> processPayment(
            @PathVariable Long orderId,
            @RequestParam PaymentMethod paymentMethod,
            Authentication authentication) {
        
        try {
            // Check authentication
            if (authentication == null || !authentication.isAuthenticated()) {
                return ResponseEntity.status(401)
                    .body(ResponseWrapper.error("Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ s·ª≠ d·ª•ng t√≠nh nƒÉng n√†y"));
            }
            
            User user = userRepository.findByEmail(authentication.getName()).orElse(null);
            if (user == null) {
                return ResponseEntity.status(401)
                    .body(ResponseWrapper.error("Ng∆∞·ªùi d√πng kh√¥ng h·ª£p l·ªá"));
            }
            
            // Get order entity
            Order order = orderService.getOrderEntity(orderId, user.getId());
            if (order == null) {
                return ResponseEntity.badRequest()
                    .body(ResponseWrapper.error("ƒê∆°n h√†ng kh√¥ng t·ªìn t·∫°i ho·∫∑c b·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p"));
            }
            
            // Process payment
            PaymentService.PaymentResult paymentResult = paymentService.processPayment(order, paymentMethod);
            
            if (paymentResult.isSuccess()) {
                logger.info("Payment processed successfully for order {} by user {}", orderId, user.getEmail());
                return ResponseEntity.ok(ResponseWrapper.success(paymentResult));
            } else {
                return ResponseEntity.badRequest()
                    .body(ResponseWrapper.error(paymentResult.getMessage()));
            }
            
        } catch (Exception e) {
            logger.error("Error processing payment for order {}: {}", orderId, e.getMessage());
            return ResponseEntity.internalServerError()
                .body(ResponseWrapper.error("C√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω thanh to√°n"));
        }
    }
    
    /**
     * REST API: Get available payment methods
     */
    @GetMapping("/api/payment/methods")
    @ResponseBody
    public ResponseEntity<ResponseWrapper<Map<String, Object>>> getPaymentMethods() {
        
        try {
            Map<String, Object> paymentMethods = paymentService.getAvailablePaymentMethods();
            return ResponseEntity.ok(ResponseWrapper.success(paymentMethods));
            
        } catch (Exception e) {
            logger.error("Error getting payment methods: {}", e.getMessage());
            return ResponseEntity.internalServerError()
                .body(ResponseWrapper.error("C√≥ l·ªói x·∫£y ra khi l·∫•y danh s√°ch ph∆∞∆°ng th·ª©c thanh to√°n"));
        }
    }
    
    /**
     * REST API: Create order with payment processing
     */
    @PostMapping("/api/orders/create-with-payment")
    @ResponseBody
    public ResponseEntity<ResponseWrapper<Map<String, Object>>> createOrderWithPayment(
            @Valid @RequestBody OrderWithPaymentRequest request,
            Authentication authentication) {
        
        try {
            // Check authentication
            if (authentication == null || !authentication.isAuthenticated()) {
                return ResponseEntity.status(401)
                    .body(ResponseWrapper.error("Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ s·ª≠ d·ª•ng t√≠nh nƒÉng n√†y"));
            }
            
            User user = userRepository.findByEmail(authentication.getName()).orElse(null);
            if (user == null) {
                return ResponseEntity.status(401)
                    .body(ResponseWrapper.error("Ng∆∞·ªùi d√πng kh√¥ng h·ª£p l·ªá"));
            }
            
            // Validate user profile before creating order
            String validationError = validateUserProfileForCheckout(user);
            if (validationError != null) {
                return ResponseEntity.badRequest()
                    .body(ResponseWrapper.error(validationError));
            }
            
            // Create order first
            Order order;
            try {
                order = orderService.createOrderFromCartEntity(user.getId(), request.getOrderRequest());
            } catch (RuntimeException e) {
                return ResponseEntity.badRequest()
                    .body(ResponseWrapper.error(e.getMessage()));
            }
            
            // Process payment
            PaymentService.PaymentResult paymentResult = paymentService.processPayment(order, request.getPaymentMethod());
            
            Map<String, Object> result = new HashMap<>();
            result.put("order", OrderDTO.fromOrder(order));
            result.put("payment", paymentResult);
            
            if (paymentResult.isSuccess()) {
                logger.info("Order created and payment processed successfully for user {}", user.getEmail());
                return ResponseEntity.ok(ResponseWrapper.success(result));
            } else {
                // Order created but payment failed
                return ResponseEntity.badRequest()
                    .body(ResponseWrapper.error(paymentResult.getMessage()));
            }
            
        } catch (Exception e) {
            logger.error("Error creating order with payment: {}", e.getMessage());
            return ResponseEntity.internalServerError()
                .body(ResponseWrapper.error("C√≥ l·ªói x·∫£y ra khi t·∫°o ƒë∆°n h√†ng v√† x·ª≠ l√Ω thanh to√°n"));
        }
    }
    
    // Request DTO for order with payment
    public static class OrderWithPaymentRequest {
        private OrderRequest orderRequest;
        private PaymentMethod paymentMethod;
        
        public OrderRequest getOrderRequest() {
            return orderRequest;
        }
        
        public void setOrderRequest(OrderRequest orderRequest) {
            this.orderRequest = orderRequest;
        }
        
        public PaymentMethod getPaymentMethod() {
            return paymentMethod;
        }
        
        public void setPaymentMethod(PaymentMethod paymentMethod) {
            this.paymentMethod = paymentMethod;
        }
    }
    
    /**
     * Validate user profile for checkout
     * @param user User to validate
     * @return Error message if validation fails, null if valid
     */
    private String validateUserProfileForCheckout(User user) {
        // Check phone number
        if (user.getPhone() == null || user.getPhone().trim().isEmpty()) {
            return "Vui l√≤ng c·∫≠p nh·∫≠t s·ªë ƒëi·ªán tho·∫°i trong t√†i kho·∫£n c·ªßa b·∫°n ƒë·ªÉ ti·∫øp t·ª•c thanh to√°n.";
        }
        
        // Validate Vietnamese phone number (10 digits, starts with 0)
        String phone = user.getPhone().trim().replaceAll("\\s+", "");
        if (!phone.matches("^0[0-9]{9}$")) {
            return "S·ªë ƒëi·ªán tho·∫°i kh√¥ng h·ª£p l·ªá. Vui l√≤ng nh·∫≠p s·ªë ƒëi·ªán tho·∫°i Vi·ªát Nam g·ªìm 10 ch·ªØ s·ªë (b·∫Øt ƒë·∫ßu b·∫±ng s·ªë 0).";
        }
        
        // Check if user has at least one address
        if (user.getAddresses() == null || user.getAddresses().isEmpty()) {
            return "Vui l√≤ng th√™m ƒë·ªãa ch·ªâ giao h√†ng trong t√†i kho·∫£n c·ªßa b·∫°n ƒë·ªÉ ti·∫øp t·ª•c thanh to√°n.";
        }
        
        // Check if user has a default address or at least one valid address
        boolean hasValidAddress = user.getAddresses().stream()
            .anyMatch(addr -> addr.getStreet() != null && !addr.getStreet().trim().isEmpty());
        
        if (!hasValidAddress) {
            return "Vui l√≤ng c·∫≠p nh·∫≠t ƒë·ªãa ch·ªâ giao h√†ng trong t√†i kho·∫£n c·ªßa b·∫°n.";
        }
        
        return null; // All validations passed
    }
}
