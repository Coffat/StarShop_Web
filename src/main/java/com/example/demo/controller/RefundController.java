package com.example.demo.controller;

import com.example.demo.entity.RefundTransaction;
import com.example.demo.service.MoMoRefundService;
import com.example.demo.service.OrderService;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

@RestController
@RequestMapping("/api/admin/refunds")
@RequiredArgsConstructor
@Slf4j
@Tag(name = "üí∞ Refund Management", description = "APIs for managing refunds - Admin only")
public class RefundController {
    
    private final MoMoRefundService moMoRefundService;
    private final OrderService orderService;
    
    @Operation(
        summary = "Ho√†n ti·ªÅn th·ªß c√¥ng cho ƒë∆°n h√†ng",
        description = "Admin c√≥ th·ªÉ ho√†n ti·ªÅn th·ªß c√¥ng cho ƒë∆°n h√†ng ƒë√£ thanh to√°n qua MoMo"
    )
    @ApiResponses(value = {
        @ApiResponse(responseCode = "200", description = "Ho√†n ti·ªÅn th√†nh c√¥ng"),
        @ApiResponse(responseCode = "400", description = "ƒê∆°n h√†ng kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ ƒë∆∞·ª£c ho√†n ti·ªÅn"),
        @ApiResponse(responseCode = "500", description = "L·ªói server")
    })
    @PostMapping("/manual/{orderId}")
    @PreAuthorize("hasRole('ADMIN')")
    public ResponseEntity<Map<String, Object>> manualRefund(
            @PathVariable String orderId,
            @RequestParam String reason) {
        
        try {
            log.info("Admin initiating manual refund for order: {}, reason: {}", orderId, reason);
            
            // Ki·ªÉm tra ƒë∆°n h√†ng c√≥ t·ªìn t·∫°i kh√¥ng
            var orderDTO = orderService.getOrderById(orderId);
            if (orderDTO == null) {
                return ResponseEntity.badRequest()
                    .body(Map.of("success", false, "message", "ƒê∆°n h√†ng kh√¥ng t·ªìn t·∫°i"));
            }
            
            // L·∫•y Order entity t·ª´ repository
            var order = orderService.getOrderEntityById(orderId);
            if (order == null) {
                return ResponseEntity.badRequest()
                    .body(Map.of("success", false, "message", "ƒê∆°n h√†ng kh√¥ng t·ªìn t·∫°i"));
            }
            
            // Ki·ªÉm tra ƒë∆°n h√†ng ƒë√£ ƒë∆∞·ª£c ho√†n ti·ªÅn ch∆∞a
            if (moMoRefundService.isOrderRefunded(orderId)) {
                return ResponseEntity.badRequest()
                    .body(Map.of("success", false, "message", "ƒê∆°n h√†ng ƒë√£ ƒë∆∞·ª£c ho√†n ti·ªÅn tr∆∞·ªõc ƒë√≥"));
            }
            
            // Ki·ªÉm tra ph∆∞∆°ng th·ª©c thanh to√°n
            if (order.getPaymentMethod() != com.example.demo.entity.enums.PaymentMethod.MOMO) {
                return ResponseEntity.badRequest()
                    .body(Map.of("success", false, "message", "Ch·ªâ c√≥ th·ªÉ ho√†n ti·ªÅn cho ƒë∆°n h√†ng thanh to√°n qua MoMo"));
            }
            
            // Th·ª±c hi·ªán ho√†n ti·ªÅn
            RefundTransaction refundTransaction = moMoRefundService.processRefund(order, reason);
            
            Map<String, Object> response = new HashMap<>();
            response.put("success", true);
            response.put("message", "Ho√†n ti·ªÅn ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω");
            response.put("refundId", refundTransaction.getRefundId());
            response.put("status", refundTransaction.getStatus());
            response.put("amount", refundTransaction.getAmount());
            
            log.info("Manual refund processed successfully for order: {}, refundId: {}", 
                    orderId, refundTransaction.getRefundId());
            
            return ResponseEntity.ok(response);
            
        } catch (Exception e) {
            log.error("Error processing manual refund for order {}: {}", orderId, e.getMessage(), e);
            return ResponseEntity.internalServerError()
                .body(Map.of("success", false, "message", "C√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω ho√†n ti·ªÅn: " + e.getMessage()));
        }
    }
    
    @Operation(
        summary = "L·∫•y danh s√°ch ho√†n ti·ªÅn theo ƒë∆°n h√†ng",
        description = "L·∫•y t·∫•t c·∫£ giao d·ªãch ho√†n ti·ªÅn c·ªßa m·ªôt ƒë∆°n h√†ng"
    )
    @GetMapping("/order/{orderId}")
    @PreAuthorize("hasRole('ADMIN')")
    public ResponseEntity<Map<String, Object>> getRefundsByOrder(@PathVariable String orderId) {
        try {
            List<RefundTransaction> refunds = moMoRefundService.getRefundsByOrderId(orderId);
            
            Map<String, Object> response = new HashMap<>();
            response.put("success", true);
            response.put("orderId", orderId);
            response.put("refunds", refunds);
            response.put("totalRefunded", moMoRefundService.getTotalRefundedAmount(orderId));
            response.put("isRefunded", moMoRefundService.isOrderRefunded(orderId));
            
            return ResponseEntity.ok(response);
            
        } catch (Exception e) {
            log.error("Error getting refunds for order {}: {}", orderId, e.getMessage(), e);
            return ResponseEntity.internalServerError()
                .body(Map.of("success", false, "message", "C√≥ l·ªói x·∫£y ra khi l·∫•y th√¥ng tin ho√†n ti·ªÅn"));
        }
    }
    
    @Operation(
        summary = "Ki·ªÉm tra tr·∫°ng th√°i ho√†n ti·ªÅn",
        description = "Ki·ªÉm tra xem ƒë∆°n h√†ng ƒë√£ ƒë∆∞·ª£c ho√†n ti·ªÅn ch∆∞a"
    )
    @GetMapping("/status/{orderId}")
    @PreAuthorize("hasRole('ADMIN')")
    public ResponseEntity<Map<String, Object>> getRefundStatus(@PathVariable String orderId) {
        try {
            boolean isRefunded = moMoRefundService.isOrderRefunded(orderId);
            var totalRefunded = moMoRefundService.getTotalRefundedAmount(orderId);
            var refunds = moMoRefundService.getRefundsByOrderId(orderId);
            
            Map<String, Object> response = new HashMap<>();
            response.put("success", true);
            response.put("orderId", orderId);
            response.put("isRefunded", isRefunded);
            response.put("totalRefunded", totalRefunded);
            response.put("refundCount", refunds.size());
            
            return ResponseEntity.ok(response);
            
        } catch (Exception e) {
            log.error("Error checking refund status for order {}: {}", orderId, e.getMessage(), e);
            return ResponseEntity.internalServerError()
                .body(Map.of("success", false, "message", "C√≥ l·ªói x·∫£y ra khi ki·ªÉm tra tr·∫°ng th√°i ho√†n ti·ªÅn"));
        }
    }
}
