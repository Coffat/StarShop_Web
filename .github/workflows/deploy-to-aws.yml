name: Deploy to AWS ECS

on:
  push:
    branches:
      - vien-deploy

env:
  AWS_REGION: ap-southeast-2
  ECR_REPOSITORY: flower_shop_app
  ECS_SERVICE: flower-shop-service
  ECS_CLUSTER: flower-shop-cluster
  ECS_TASK_DEFINITION: flower-shop-task

jobs:
  deploy:
    name: Build and Deploy to AWS
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build Docker image for AMD64 platform
          docker buildx build --platform linux/amd64 \
            -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
            -t $ECR_REGISTRY/$ECR_REPOSITORY:latest \
            --push .
          
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Get AWS Account ID
        id: get-account-id
        run: |
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          echo "account_id=$ACCOUNT_ID" >> $GITHUB_OUTPUT
          echo "AWS Account ID: $ACCOUNT_ID"

      - name: Update task definition with new image
        id: update-task-def
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
          ACCOUNT_ID: ${{ steps.get-account-id.outputs.account_id }}
        run: |
          # Read task definition template
          TASK_DEF=$(cat task-definition.json)
          
          # Replace placeholder values
          TASK_DEF=$(echo "$TASK_DEF" | sed "s|YOUR_AWS_ACCOUNT_ID|$ACCOUNT_ID|g")
          TASK_DEF=$(echo "$TASK_DEF" | sed "s|:latest|:$IMAGE_TAG|g")
          
          # Save updated task definition
          echo "$TASK_DEF" > task-definition-updated.json
          
          # Register new task definition
          TASK_DEF_ARN=$(aws ecs register-task-definition \
            --cli-input-json file://task-definition-updated.json \
            --region ${{ env.AWS_REGION }} \
            --query 'taskDefinition.taskDefinitionArn' \
            --output text)
          
          echo "task_def_arn=$TASK_DEF_ARN" >> $GITHUB_OUTPUT
          echo "Registered task definition: $TASK_DEF_ARN"

      - name: Update ECS service with new task definition
        run: |
          aws ecs update-service \
            --cluster ${{ env.ECS_CLUSTER }} \
            --service ${{ env.ECS_SERVICE }} \
            --task-definition ${{ steps.update-task-def.outputs.task_def_arn }} \
            --force-new-deployment \
            --region ${{ env.AWS_REGION }}

      - name: Wait for service stability
        run: |
          echo "Waiting for service to stabilize..."
          aws ecs wait services-stable \
            --cluster ${{ env.ECS_CLUSTER }} \
            --services ${{ env.ECS_SERVICE }} \
            --region ${{ env.AWS_REGION }}
          echo "Service is now stable!"

      - name: Get ECS Task Public IP
        id: get-ip
        run: |
          # Get the running task ARN
          TASK_ARN=$(aws ecs list-tasks \
            --cluster ${{ env.ECS_CLUSTER }} \
            --service-name ${{ env.ECS_SERVICE }} \
            --region ${{ env.AWS_REGION }} \
            --query 'taskArns[0]' \
            --output text)
          
          echo "Task ARN: $TASK_ARN"
          
          # Get the ENI ID from the task
          ENI_ID=$(aws ecs describe-tasks \
            --cluster ${{ env.ECS_CLUSTER }} \
            --tasks $TASK_ARN \
            --region ${{ env.AWS_REGION }} \
            --query 'tasks[0].attachments[0].details[?name==`networkInterfaceId`].value' \
            --output text)
          
          echo "ENI ID: $ENI_ID"
          
          # Get the public IP from the ENI
          PUBLIC_IP=$(aws ec2 describe-network-interfaces \
            --network-interface-ids $ENI_ID \
            --region ${{ env.AWS_REGION }} \
            --query 'NetworkInterfaces[0].Association.PublicIp' \
            --output text)
          
          echo "Public IP: $PUBLIC_IP"
          echo "public_ip=$PUBLIC_IP" >> $GITHUB_OUTPUT

      - name: Update DuckDNS
        run: |
          RESPONSE=$(curl -s "https://www.duckdns.org/update?domains=starshop-hcmute&token=${{ secrets.DUCKDNS_TOKEN }}&ip=${{ steps.get-ip.outputs.public_ip }}")
          
          if [ "$RESPONSE" = "OK" ]; then
            echo "✅ DuckDNS updated successfully!"
            echo "🌐 Domain: starshop-hcmute.duckdns.org"
            echo "📍 New IP: ${{ steps.get-ip.outputs.public_ip }}"
          else
            echo "❌ Failed to update DuckDNS"
            exit 1
          fi

      - name: Deployment successful
        run: |
          echo "✅ Deployment completed successfully!"
          echo "🌐 Application URL: http://starshop-hcmute.duckdns.org"
          echo "📍 Public IP: ${{ steps.get-ip.outputs.public_ip }}"
