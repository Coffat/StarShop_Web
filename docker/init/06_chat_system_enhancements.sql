-- ====================================================================================
-- Chat System Enhancements
-- ====================================================================================
-- This script enhances the Messages table and creates Conversations table
-- for staff portal chat system with support for future AI integration
-- Created: 2025-01-11
-- ====================================================================================

-- ====================================================================================
-- 1. Enhance Messages Table
-- ====================================================================================

-- Add conversation_id to link messages to conversations
DO $$ 
BEGIN
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns 
                   WHERE table_name='messages' AND column_name='conversation_id') THEN
        ALTER TABLE Messages ADD COLUMN conversation_id BIGINT;
        COMMENT ON COLUMN Messages.conversation_id IS 'Links message to a conversation';
    END IF;
END $$;

-- Add message_type to distinguish text, system, and AI messages
DO $$ 
BEGIN
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns 
                   WHERE table_name='messages' AND column_name='message_type') THEN
        ALTER TABLE Messages ADD COLUMN message_type VARCHAR(20) DEFAULT 'TEXT';
        COMMENT ON COLUMN Messages.message_type IS 'Message type: TEXT, SYSTEM, AI_RESPONSE';
    END IF;
END $$;

-- Add is_ai_generated flag for AI-generated messages
DO $$ 
BEGIN
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns 
                   WHERE table_name='messages' AND column_name='is_ai_generated') THEN
        ALTER TABLE Messages ADD COLUMN is_ai_generated BOOLEAN DEFAULT FALSE;
        COMMENT ON COLUMN Messages.is_ai_generated IS 'Flag indicating if message was generated by AI';
    END IF;
END $$;

-- Add attachments field for future file attachments
DO $$ 
BEGIN
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns 
                   WHERE table_name='messages' AND column_name='attachments') THEN
        ALTER TABLE Messages ADD COLUMN attachments TEXT;
        COMMENT ON COLUMN Messages.attachments IS 'JSON string of file attachments';
    END IF;
END $$;

-- Create indexes for better performance
CREATE INDEX IF NOT EXISTS idx_messages_conversation_id ON Messages(conversation_id);
CREATE INDEX IF NOT EXISTS idx_messages_is_read ON Messages(is_read);
CREATE INDEX IF NOT EXISTS idx_messages_message_type ON Messages(message_type);

-- ====================================================================================
-- 2. Create Conversations Table
-- ====================================================================================

CREATE TABLE IF NOT EXISTS Conversations (
    id BIGSERIAL PRIMARY KEY,
    customer_id BIGINT NOT NULL,
    assigned_staff_id BIGINT,
    status VARCHAR(20) NOT NULL DEFAULT 'OPEN',
    priority VARCHAR(20) DEFAULT 'NORMAL',
    last_message_at TIMESTAMP,
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP,
    closed_at TIMESTAMP,
    notes TEXT,
    CONSTRAINT fk_conversation_customer FOREIGN KEY (customer_id) REFERENCES Users(id) ON DELETE CASCADE,
    CONSTRAINT fk_conversation_staff FOREIGN KEY (assigned_staff_id) REFERENCES Users(id) ON DELETE SET NULL,
    CONSTRAINT chk_conversation_status CHECK (status IN ('OPEN', 'ASSIGNED', 'CLOSED')),
    CONSTRAINT chk_conversation_priority CHECK (priority IN ('LOW', 'NORMAL', 'HIGH', 'URGENT'))
);

COMMENT ON TABLE Conversations IS 'Conversation threads between customers and staff';
COMMENT ON COLUMN Conversations.customer_id IS 'Customer who initiated the conversation';
COMMENT ON COLUMN Conversations.assigned_staff_id IS 'Staff member assigned to handle this conversation';
COMMENT ON COLUMN Conversations.status IS 'Conversation status: OPEN (unassigned), ASSIGNED (active), CLOSED';
COMMENT ON COLUMN Conversations.priority IS 'Conversation priority level';
COMMENT ON COLUMN Conversations.last_message_at IS 'Timestamp of most recent message';
COMMENT ON COLUMN Conversations.notes IS 'Internal notes for staff about this conversation';

-- Create indexes for efficient querying
CREATE INDEX idx_conversations_status ON Conversations(status);
CREATE INDEX idx_conversations_assigned_staff ON Conversations(assigned_staff_id);
CREATE INDEX idx_conversations_customer ON Conversations(customer_id);
CREATE INDEX idx_conversations_last_message ON Conversations(last_message_at DESC);
CREATE INDEX idx_conversations_status_staff ON Conversations(status, assigned_staff_id);
CREATE INDEX idx_conversations_status_created ON Conversations(status, created_at DESC);

-- ====================================================================================
-- 3. Functions and Triggers
-- ====================================================================================

-- Function to update conversation's last_message_at timestamp
CREATE OR REPLACE FUNCTION update_conversation_last_message() RETURNS TRIGGER AS $$
BEGIN
    UPDATE Conversations
    SET last_message_at = NEW.sent_at,
        updated_at = CURRENT_TIMESTAMP
    WHERE id = NEW.conversation_id;
    
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Trigger to automatically update conversation timestamp when new message is added
DROP TRIGGER IF EXISTS trg_update_conversation_last_message ON Messages;
CREATE TRIGGER trg_update_conversation_last_message
    AFTER INSERT ON Messages
    FOR EACH ROW
    WHEN (NEW.conversation_id IS NOT NULL)
    EXECUTE FUNCTION update_conversation_last_message();

-- Function to get conversation statistics
CREATE OR REPLACE FUNCTION get_conversation_stats()
RETURNS TABLE(
    total_conversations BIGINT,
    open_conversations BIGINT,
    assigned_conversations BIGINT,
    closed_conversations BIGINT,
    avg_response_time_minutes NUMERIC
) AS $$
BEGIN
    RETURN QUERY
    SELECT 
        COUNT(*) as total_conversations,
        COUNT(*) FILTER (WHERE status = 'OPEN') as open_conversations,
        COUNT(*) FILTER (WHERE status = 'ASSIGNED') as assigned_conversations,
        COUNT(*) FILTER (WHERE status = 'CLOSED') as closed_conversations,
        COALESCE(AVG(EXTRACT(EPOCH FROM (closed_at - created_at)) / 60), 0)::NUMERIC as avg_response_time_minutes
    FROM Conversations;
END;
$$ LANGUAGE plpgsql;

-- Function to get staff workload
CREATE OR REPLACE FUNCTION get_staff_workload(staff_id_param BIGINT)
RETURNS TABLE(
    active_conversations BIGINT,
    total_assigned BIGINT,
    unread_messages BIGINT
) AS $$
BEGIN
    RETURN QUERY
    SELECT 
        COUNT(*) FILTER (WHERE c.status IN ('OPEN', 'ASSIGNED')) as active_conversations,
        COUNT(*) as total_assigned,
        COALESCE((
            SELECT COUNT(*) 
            FROM Messages m 
            WHERE m.receiver_id = staff_id_param 
            AND m.is_read = FALSE
        ), 0) as unread_messages
    FROM Conversations c
    WHERE c.assigned_staff_id = staff_id_param;
END;
$$ LANGUAGE plpgsql;

-- Function to auto-assign conversation to available staff
CREATE OR REPLACE FUNCTION auto_assign_conversation(conversation_id_param BIGINT)
RETURNS BIGINT AS $$
DECLARE
    selected_staff_id BIGINT;
BEGIN
    -- Find staff with least active conversations
    SELECT u.id INTO selected_staff_id
    FROM Users u
    LEFT JOIN Conversations c ON c.assigned_staff_id = u.id AND c.status IN ('OPEN', 'ASSIGNED')
    WHERE u.role = 'STAFF' AND u.is_active = TRUE
    GROUP BY u.id
    ORDER BY COUNT(c.id) ASC, RANDOM()
    LIMIT 1;
    
    -- Assign conversation to selected staff
    IF selected_staff_id IS NOT NULL THEN
        UPDATE Conversations
        SET assigned_staff_id = selected_staff_id,
            status = 'ASSIGNED',
            updated_at = CURRENT_TIMESTAMP
        WHERE id = conversation_id_param;
    END IF;
    
    RETURN selected_staff_id;
END;
$$ LANGUAGE plpgsql;

-- ====================================================================================
-- 4. Create Views for Reporting
-- ====================================================================================

-- View for staff performance metrics
CREATE OR REPLACE VIEW staff_chat_performance AS
SELECT 
    u.id as staff_id,
    u.firstname || ' ' || u.lastname as staff_name,
    u.employee_code,
    COUNT(DISTINCT c.id) as total_conversations,
    COUNT(DISTINCT c.id) FILTER (WHERE c.status = 'ASSIGNED') as active_conversations,
    COUNT(DISTINCT c.id) FILTER (WHERE c.status = 'CLOSED') as closed_conversations,
    COUNT(DISTINCT m.id) as total_messages_sent,
    AVG(EXTRACT(EPOCH FROM (c.closed_at - c.created_at)) / 60) as avg_resolution_time_minutes
FROM Users u
LEFT JOIN Conversations c ON u.id = c.assigned_staff_id
LEFT JOIN Messages m ON u.id = m.sender_id AND m.conversation_id IS NOT NULL
WHERE u.role = 'STAFF'
GROUP BY u.id, u.firstname, u.lastname, u.employee_code;

COMMENT ON VIEW staff_chat_performance IS 'Performance metrics for staff chat support';

-- View for conversation summary
CREATE OR REPLACE VIEW conversation_summary AS
SELECT 
    c.id,
    c.status,
    c.priority,
    c.created_at,
    c.last_message_at,
    c.closed_at,
    customer.id as customer_id,
    customer.firstname || ' ' || customer.lastname as customer_name,
    customer.email as customer_email,
    staff.id as staff_id,
    staff.firstname || ' ' || staff.lastname as staff_name,
    staff.employee_code as staff_code,
    (SELECT COUNT(*) FROM Messages WHERE conversation_id = c.id) as message_count,
    (SELECT COUNT(*) FROM Messages WHERE conversation_id = c.id AND is_read = FALSE) as unread_count
FROM Conversations c
INNER JOIN Users customer ON c.customer_id = customer.id
LEFT JOIN Users staff ON c.assigned_staff_id = staff.id;

COMMENT ON VIEW conversation_summary IS 'Detailed summary of all conversations with customer and staff info';

-- ====================================================================================
-- 5. Sample Data (Optional - for testing)
-- ====================================================================================

-- Uncomment below to insert sample conversations for testing
/*
-- Ensure we have at least one customer and one staff for testing
INSERT INTO Users (firstname, lastname, email, password, phone, role, created_at)
VALUES 
    ('Test', 'Customer', 'testcustomer@example.com', '$2a$10$dummypasswordhash', '0900000001', 'CUSTOMER', CURRENT_TIMESTAMP),
    ('Test', 'Staff', 'teststaff@example.com', '$2a$10$dummypasswordhash', '0900000002', 'STAFF', CURRENT_TIMESTAMP)
ON CONFLICT (email) DO NOTHING;

-- Insert sample conversation
INSERT INTO Conversations (customer_id, status, priority, created_at)
SELECT 
    (SELECT id FROM Users WHERE email = 'testcustomer@example.com' LIMIT 1),
    'OPEN',
    'NORMAL',
    CURRENT_TIMESTAMP
WHERE NOT EXISTS (SELECT 1 FROM Conversations LIMIT 1);
*/

-- ====================================================================================
-- 6. Grant Permissions
-- ====================================================================================

-- Grant necessary permissions for application user
-- GRANT SELECT, INSERT, UPDATE ON Conversations TO your_app_user;
-- GRANT SELECT, UPDATE ON Messages TO your_app_user;
-- GRANT EXECUTE ON FUNCTION update_conversation_last_message() TO your_app_user;
-- GRANT EXECUTE ON FUNCTION get_conversation_stats() TO your_app_user;
-- GRANT EXECUTE ON FUNCTION get_staff_workload(BIGINT) TO your_app_user;
-- GRANT EXECUTE ON FUNCTION auto_assign_conversation(BIGINT) TO your_app_user;

-- ====================================================================================
-- End of Script
-- ====================================================================================

